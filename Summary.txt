
小结
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

删除文件：
Git rm file; git commit -m "message"

撤销修改：
git restore <file>: discard changes in working directory
git restore --staged <file>: to unstage
(替代方法：
git checkout -- file
git reset HEAD <file>）

版本回退：
git reset --hard HEAD^
git reset –hard HEAD~100
git reflog
git reset --hard 1094a


远程仓库：
git remote add origin git@github.com:michaelliao/learngit.git
git push origin master
git push -u origin master
-u: 把本地的master分支和远程的master分支关联起来
git remote rm <name>
git clone git@github.com:michaelliao/gitskills.git

分支管理：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name> OR git switch <name>
创建+切换分支：git checkout -b <name> OR git switch -c <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
小结
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph --pretty=oneline --abbrev-commit命令可以看到分支合并图。

合并\创建一个新的commit，所以加上-m参数，把commit描述写进去;
--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并:
git merge --no-ff -m "merge with no-ff" dev

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。











远程编辑，更新到本地：
git fetch origin
git merge origin/master